{"version":3,"sources":["components/Buttons/PrimaryButton.js","components/Buttons/RadioGroupFormat.js","components/Buttons/ResolutionSelect.js","components/Buttons/InputFeild.js","components/LayoutComponents/Header.js","App.js","reportWebVitals.js","index.js"],"names":["SuccessButton","title","handleClick","props","Button","style","margin","variant","color","onClick","defaultProps","RadioGroupFormat","currentValue","handleChange","FormControl","component","FormLabel","RadioGroup","aria-label","name","value","onChange","FormControlLabel","checked","control","Radio","label","ResolutionSelect","menuItems","InputLabel","Select","fullWidth","map","menuItem","MenuItem","id","InputFeild","TextField","useStyles","makeStyles","root","flexGrow","Header","classes","className","AppBar","position","Toolbar","Typography","devices","width","height","App","useState","urlValue","setUrlValue","resolution","setResolution","imageFormat","setImageFormat","isError","isLoading","responseStatus","setResponseStatus","handleScreenshotClick","a","resolutionSettings","find","item","uri","axios","get","responseType","reponse","FileSaver","saveAs","Blob","data","console","log","Grid","container","justify","alignItems","xs","md","lg","xl","e","target","Number","PrimaryButton","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e5e97d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nfunction SuccessButton({ title, handleClick, ...props }) {\r\n  return (\r\n    <div>\r\n      <Button style={{margin:0}} variant=\"contained\" color=\"primary\" {...props} onClick={handleClick} >\r\n        {title}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nSuccessButton.propTypes = {\r\n  handleClick: PropTypes.func,\r\n  title: PropTypes.string,\r\n};\r\n\r\nSuccessButton.defaultProps = {\r\n  handleClick: () => null,\r\n  title: \"\",\r\n};\r\n\r\nexport default SuccessButton;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n} from \"@material-ui/core\";\r\n\r\nfunction RadioGroupFormat({ currentValue, handleChange }) {\r\n  return (\r\n    <div>\r\n      <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">Choose image format</FormLabel>\r\n        <RadioGroup\r\n          aria-label=\"quiz\"\r\n          name=\"quiz\"\r\n          value={currentValue}\r\n          onChange={handleChange}\r\n        >\r\n          <FormControlLabel\r\n            value=\"jpeg\"\r\n            checked={currentValue === \"jpeg\"}\r\n            control={<Radio color=\"primary\" />}\r\n            label=\"JPEG\"\r\n          />\r\n          <FormControlLabel\r\n            value=\"png\"\r\n            checked={currentValue === \"png\"}\r\n            control={<Radio color=\"primary\" />}\r\n            label=\"PNG\"\r\n          />\r\n        </RadioGroup>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nRadioGroupFormat.propTypes = {\r\n  currentValue: PropTypes.string,\r\n  handleChange: PropTypes.func,\r\n};\r\n\r\nRadioGroupFormat.defaultProps = {\r\n  currentValue: \"\",\r\n  handleChange: () => null,\r\n};\r\n\r\nexport default RadioGroupFormat;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { InputLabel, MenuItem, Select } from \"@material-ui/core\";\r\n\r\nfunction ResolutionSelect({ menuItems, value, handleChange, title }) {\r\n  return (\r\n    <div>\r\n      <InputLabel>{title}</InputLabel>\r\n\r\n      <Select fullWidth value={value} onChange={handleChange}>\r\n        {menuItems.map((menuItem) => {\r\n          return (\r\n            <MenuItem key={menuItem.id} value={menuItem.id}>\r\n              {menuItem.name}\r\n            </MenuItem>\r\n          );\r\n        })}\r\n      </Select>\r\n    </div>\r\n  );\r\n}\r\n\r\nResolutionSelect.propTypes = {\r\n  title: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  handleChange: PropTypes.func,\r\n  menuItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      name: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nResolutionSelect.defaultProps = {\r\n  title: \"\",\r\n  value: null,\r\n  handleChange: () => null,\r\n  menuItems: [],\r\n};\r\n\r\nexport default ResolutionSelect;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nfunction InputFeild({ title, value, handleChange }) {\r\n  return (\r\n    <div>\r\n      <TextField\r\n        value={value}\r\n        fullWidth\r\n        onChange={handleChange}\r\n        label={title}\r\n        //   variant=\"outlined\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nInputFeild.propTypes = {\r\n  title: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  handleChange: PropTypes.func,\r\n};\r\n\r\nInputFeild.defaultProps={\r\n    title: \"\",\r\n    value: null,\r\n    handleChange: () => null,\r\n}\r\n\r\nexport default InputFeild;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function Header() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n            Screenshot App\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport PrimaryButton from \"./components/Buttons/PrimaryButton\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport FileSaver from \"file-saver\";\nimport { Grid } from \"@material-ui/core\";\nimport RadioGroupFormat from \"./components/Buttons/RadioGroupFormat\";\nimport ResolutionSelect from \"./components/Buttons/ResolutionSelect\";\nimport InputFeild from \"./components/Buttons/InputFeild\";\nimport Header from \"./components/LayoutComponents/Header\";\n\nconst devices = [\n  { id: 1, name: \"Full width\", title: \"Highest\" },\n  { id: 2, name: \"1920x1080\", title: \"Highest\", width: 1920, height: 1080 },\n  { id: 3, name: \"1366x768\", title: \"Laptop-1\", width: 1366, height: 768 },\n  {\n    id: 4,\n    name: \"1280x800\",\n    title: \"Small-Desktop-1\",\n    width: 1280,\n    height: 800,\n  },\n  { id: 5, name: \"768x1024\", title: \"Ipad-Tab\", width: 768, height: 1024 },\n  { id: 6, name: \"360x640\", title: \"Android\", width: 360, height: 640 },\n  { id: 7, name: \"375x667\", title: \"Iphone\", width: 375, height: 667 },\n];\n\nfunction App() {\n  const [urlValue, setUrlValue] = useState(\"\");\n  const [resolution, setResolution] = useState(1);\n  const [imageFormat, setImageFormat] = useState(\"jpeg\");\n  const [responseStatus, setResponseStatus] = useState({\n    isError: false,\n    isLoading: false,\n  });\n\n  const handleInputChange = (e) => {\n    setUrlValue(e.target.value);\n  };\n\n  const handleScreenshotClick = async () => {\n    setResponseStatus({\n      ...responseStatus,\n      isLoading: true,\n      isError: false,\n    });\n    try {\n      const resolutionSettings = devices.find((item) => item.id === resolution);\n      const uri =\n        resolutionSettings.width && resolutionSettings.height\n          ? `/api/screenshot?weburi=${urlValue}&imagetype=${imageFormat}&width=${resolutionSettings.width}&height=${resolutionSettings.height}`\n          : `/api/screenshot?weburi=${urlValue}&imagetype=${imageFormat}`;\n      const reponse = await axios.get(uri, {\n        responseType: \"arraybuffer\",\n      });\n      FileSaver.saveAs(new Blob([reponse.data]), `download.${imageFormat}`);\n      setResponseStatus({\n        ...responseStatus,\n        isLoading: false,\n        isError: false,\n      });\n      setUrlValue(\"\");\n    } catch (error) {\n      console.log(\"Errpr\", error);\n      setResponseStatus({\n        ...responseStatus,\n        isError: true,\n      });\n    }\n  };\n\n  const handleRadioChange = (e) => {\n    setImageFormat(e.target.value);\n  };\n\n  const handleResolutionChange = (e) => {\n    const currentValue = Number(e.target.value);\n    setResolution(currentValue);\n  };\n\n  return (\n    <>\n      <Header />\n      <Grid container justify=\"center\" alignItems=\"center\">\n        <Grid className=\"input-container\" item xs={8} md={6} lg={3} xl={2}>\n          <InputFeild\n            value={urlValue}\n            title=\"Paste a URL\"\n            handleChange={handleInputChange}\n          />\n          <RadioGroupFormat\n            currentValue={imageFormat}\n            handleChange={handleRadioChange}\n          />\n          <ResolutionSelect\n            title=\"Resolution\"\n            value={resolution}\n            handleChange={handleResolutionChange}\n            menuItems={devices}\n          />\n          <PrimaryButton\n            title={responseStatus.isLoading ? \"Taking a screenshot...\" : \"Take a screenshot\"}\n            handleClick={handleScreenshotClick}\n            disabled={!urlValue || responseStatus.isLoading}\n          />\n          {responseStatus.isError && (\n            <span className=\"error\">Error while taking the screenshot</span>\n          )}\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}