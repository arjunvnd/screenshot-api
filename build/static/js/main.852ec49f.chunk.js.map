{"version":3,"sources":["components/Buttons/PrimaryButton.js","components/Buttons/RadioGroupFormat.js","components/Buttons/ResolutionSelect.js","components/Buttons/InputFeild.js","components/LayoutComponents/Header.js","App.js","reportWebVitals.js","index.js"],"names":["SuccessButton","title","handleClick","props","Button","variant","color","onClick","defaultProps","RadioGroupFormat","currentValue","handleChange","FormControl","component","FormLabel","RadioGroup","aria-label","name","value","onChange","FormControlLabel","checked","control","Radio","label","ResolutionSelect","menuItems","InputLabel","Select","map","menuItem","MenuItem","id","InputFeild","TextField","useStyles","makeStyles","root","flexGrow","Header","classes","className","AppBar","position","Toolbar","Typography","devices","width","height","App","useState","urlValue","setUrlValue","resolution","setResolution","imageFormat","setImageFormat","isError","isLoading","responseStatus","setResponseStatus","handleScreenshotClick","a","resolutionSettings","find","item","uri","axios","get","responseType","reponse","FileSaver","saveAs","Blob","data","Grid","container","direction","justify","alignItems","xs","md","lg","xl","e","target","Number","PrimaryButton","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.852ec49f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nfunction SuccessButton({ title, handleClick, ...props }) {\r\n  return (\r\n    <div>\r\n      <Button variant=\"contained\" color=\"primary\" {...props} onClick={handleClick} >\r\n        {title}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nSuccessButton.propTypes = {\r\n  handleClick: PropTypes.func,\r\n  title: PropTypes.string,\r\n};\r\n\r\nSuccessButton.defaultProps = {\r\n  handleClick: () => null,\r\n  title: \"\",\r\n};\r\n\r\nexport default SuccessButton;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n} from \"@material-ui/core\";\r\n\r\nfunction RadioGroupFormat({ currentValue, handleChange }) {\r\n  return (\r\n    <div>\r\n      <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">Choose image format</FormLabel>\r\n        <RadioGroup\r\n          aria-label=\"quiz\"\r\n          name=\"quiz\"\r\n          value={currentValue}\r\n          onChange={handleChange}\r\n        >\r\n          <FormControlLabel\r\n            value=\"jpeg\"\r\n            checked={currentValue === \"jpeg\"}\r\n            control={<Radio color=\"primary\" />}\r\n            label=\"JPEG\"\r\n          />\r\n          <FormControlLabel\r\n            value=\"png\"\r\n            checked={currentValue === \"png\"}\r\n            control={<Radio color=\"primary\" />}\r\n            label=\"PNG\"\r\n          />\r\n        </RadioGroup>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nRadioGroupFormat.propTypes = {\r\n  currentValue: PropTypes.string,\r\n  handleChange: PropTypes.func,\r\n};\r\n\r\nRadioGroupFormat.defaultProps = {\r\n  currentValue: \"\",\r\n  handleChange: () => null,\r\n};\r\n\r\nexport default RadioGroupFormat;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { InputLabel, MenuItem, Select } from \"@material-ui/core\";\r\n\r\nfunction ResolutionSelect({ menuItems, value, handleChange, title }) {\r\n  return (\r\n    <div>\r\n      <InputLabel>{title}</InputLabel>\r\n\r\n      <Select value={value} onChange={handleChange}>\r\n        {menuItems.map((menuItem) => {\r\n          return (\r\n            <MenuItem key={menuItem.id} value={menuItem.id}>\r\n              {menuItem.name}\r\n            </MenuItem>\r\n          );\r\n        })}\r\n      </Select>\r\n    </div>\r\n  );\r\n}\r\n\r\nResolutionSelect.propTypes = {\r\n  title: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  handleChange: PropTypes.func,\r\n  menuItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      name: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nResolutionSelect.defaultProps = {\r\n  title: \"\",\r\n  value: null,\r\n  handleChange: () => null,\r\n  menuItems: [],\r\n};\r\n\r\nexport default ResolutionSelect;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nfunction InputFeild({ title, value, handleChange }) {\r\n  return (\r\n    <div>\r\n      <TextField\r\n        value={value}\r\n        onChange={handleChange}\r\n        label={title}\r\n        //   variant=\"outlined\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nInputFeild.propTypes = {\r\n  title: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  handleChange: PropTypes.func,\r\n};\r\n\r\nInputFeild.defaultProps={\r\n    title: \"\",\r\n    value: null,\r\n    handleChange: () => null,\r\n}\r\n\r\nexport default InputFeild;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function Header() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n            Screenshot App\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport PrimaryButton from \"./components/Buttons/PrimaryButton\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport FileSaver from \"file-saver\";\nimport { Grid,  } from \"@material-ui/core\";\nimport RadioGroupFormat from \"./components/Buttons/RadioGroupFormat\";\nimport ResolutionSelect from \"./components/Buttons/ResolutionSelect\";\nimport InputFeild from \"./components/Buttons/InputFeild\";\nimport Header from \"./components/LayoutComponents/Header\";\n\nconst devices = [\n  { id: 1, name: \"Full width\", title: \"Highest\" },\n  { id: 2, name: \"1920x1080\", title: \"Highest\", width: 1920, height: 1080 },\n  { id: 3, name: \"1366x768\", title: \"Laptop-1\", width: 1366, height: 768 },\n  {\n    id: 4,\n    name: \"1280x800\",\n    title: \"Small-Desktop-1\",\n    width: 1280,\n    height: 800,\n  },\n  { id: 5, name: \"768x1024\", title: \"Ipad-Tab\", width: 768, height: 1024 },\n  { id: 6, name: \"360x640\", title: \"Android\", width: 360, height: 640 },\n  { id: 7, name: \"375x667\", title: \"Iphone\", width: 375, height: 667 },\n];\n\nfunction App() {\n  const [urlValue, setUrlValue] = useState(\"\");\n  const [resolution, setResolution] = useState(1);\n  const [imageFormat, setImageFormat] = useState(\"jpeg\");\n  const [responseStatus, setResponseStatus] = useState({\n    isError: false,\n    isLoading: false,\n  });\n\n  const handleInputChange = (e) => {\n    setUrlValue(e.target.value);\n  };\n\n  const handleScreenshotClick = async () => {\n    setResponseStatus({\n      ...responseStatus,\n      isLoading: true,\n      isError: false,\n    });\n    try {\n      const resolutionSettings = devices.find((item) => item.id === resolution);\n      const uri =\n        resolutionSettings.width && resolutionSettings.height\n          ? `http://localhost:3001/api/screenshot?weburi=${urlValue}&imagetype=${imageFormat}&width=${resolutionSettings.width}&height=${resolutionSettings.height}`\n          : `http://localhost:3001/api/screenshot?weburi=${urlValue}&imagetype=${imageFormat}`;\n      const reponse = await axios.get(uri, {\n        responseType: \"arraybuffer\",\n      });\n      FileSaver.saveAs(new Blob([reponse.data]), `test.${imageFormat}`);\n      setResponseStatus({\n        ...responseStatus,\n        isLoading: false,\n      });\n    } catch (error) {\n      setResponseStatus({\n        ...responseStatus,\n        isError: true,\n      });\n    }\n  };\n\n  const handleRadioChange = (e) => {\n    setImageFormat(e.target.value);\n  };\n\n  const handleResolutionChange = (e) => {\n    const currentValue = Number(e.target.value);\n    setResolution(currentValue);\n  };\n\n  return (\n    <>\n    <Header />\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n        <Grid className=\"input-container\" item xs={12} md={8} lg={8} xl={8}>\n          <InputFeild\n            value={urlValue}\n            title=\"Paste a URL\"\n            handleChange={handleInputChange}\n          />\n          <RadioGroupFormat\n            currentValue={imageFormat}\n            handleChange={handleRadioChange}\n          />\n          <ResolutionSelect\n            title=\"Resolution\"\n            value={resolution}\n            handleChange={handleResolutionChange}\n            menuItems={devices}\n          />\n          <PrimaryButton\n            title=\"Take a screenshot\"\n            handleClick={handleScreenshotClick}\n            disabled={!urlValue}\n          />\n          {responseStatus.isError && (\n            <span>Error while taking the screenshot</span>\n          )}\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}